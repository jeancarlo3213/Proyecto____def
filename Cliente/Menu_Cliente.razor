@page "/Cliente/Menu_Cliente/{NombreUsuario}"
@using Proyecto____def.Estructura
@using Proyecto____def.Clases_Objetos
@using Proyecto____def.Servicios
@inject UsuarioService usuarioService
@inject SolicitudService solicitudService
@inject NavigationManager NavigationManager

<h3 class="titulo">Menú Cliente</h3>

@if (usuario != null)
{
    <div class="bienvenida">Bienvenido, @NombreCompleto</div>
    <button class="btn toggle-btn" @onclick="ToggleFormularioSolicitud">Generar Solicitud</button>
    <button class="btn toggle-solicitudes-btn" @onclick="ToggleVerSolicitudes">
        @(mostrarSolicitudes ? "Ocultar Mis Solicitudes" : "Ver Mis Solicitudes")
    </button>
    <button class="btn buscar-filtro-btn" @onclick="BuscarByFiltro">Buscar por Filtro</button>
}

@if (mostrarFormulario)
{
    <div class="seleccion-opciones">
        <h4>Seleccione una opción</h4>
        @foreach (Nodo nodo in opciones)
        {
            if (nodo.Informacion is Opcion opcion)
            {
                <button class="btn opcion-btn" @onclick="() => SeleccionarOpcion(opcion)">@opcion.Descripcion</button>
            }
        }
        <button class="btn agregar-btn" @onclick="MostrarAgregarOpcionFormulario">Agregar Opción</button>
    </div>
}

@if (mostrarSolicitudes)
{
    <div class="lista-solicitudes">
        <h4>Mis Solicitudes</h4>
        @foreach (Nodo nodo in listaSolicitudes)
        {
            if (nodo.Informacion is Solicitud solicitud)
            {
                <div class="solicitud-item">
                    <p><strong>ID de Solicitud:</strong> @solicitud.IdSolicitud</p>
                    <p><strong>Descripción:</strong> @solicitud.DescripcionDetallada</p>
                    <button class="btn detalle-solicitud-btn" @onclick="() => VerDetalleSolicitud(solicitud.IdSolicitud)">Ver Detalles</button>
                </div>
            }
        }
    </div>
}

@if (opcionSeleccionada != null)
{
    <div class="detalle-solicitud">
        <h4>Detalle de la solicitud</h4>
        <p>ID de Opción: @opcionSeleccionada.IdOpcion</p>
        <p>Descripción de Opción: @opcionSeleccionada.Descripcion</p>
        <textarea @bind="descripcionDetallada" placeholder="Describa detalladamente su problema"></textarea>
        <select @bind="prioridadSeleccionada">
            <option value="">Seleccionar Prioridad</option>
            <option value="Alta">Alta</option>
            <option value="Media">Media</option>
            <option value="Baja">Baja</option>
        </select>
        <button class="btn confirmar-btn" @onclick="ConfirmarSolicitud">Confirmar Solicitud</button>
    </div>
}

@if (mostrarAgregarOpcion)
{
    <div class="agregar-opcion">
        <h4>Agregar Nueva Opción</h4>
        <input type="text" @bind="nuevaOpcionDescripcion" placeholder="Ingrese la descripción de la nueva opción" />
        <button class="btn guardar-btn" @onclick="AgregarOpcion">Guardar Opción</button>
    </div>
}

<div class="mensaje">
    @if (mensajeConfirmacion != null)
    {
        <p class="mensaje-confirmacion">@mensajeConfirmacion</p>
    }
</div>

@if (solicitudRecienCreada != null)
{
    <div class="solicitud-recien-creada">
        <h4>Detalles de la Solicitud Creada</h4>
        <p><strong>ID:</strong> @solicitudRecienCreada.IdSolicitud</p>
        <p><strong>Descripción Detallada:</strong> @solicitudRecienCreada.DescripcionDetallada</p>
        <p><strong>Prioridad:</strong> @solicitudRecienCreada.Prioridad</p>
        <p><strong>Estado:</strong> @solicitudRecienCreada.Estado</p>
        <p><strong>Fecha de Creación:</strong> @solicitudRecienCreada.FechaCreacion.ToString("dd/MM/yyyy HH:mm")</p>
        <button class="btn btn-info" @onclick="() => VerDetalleSolicitud(solicitudRecienCreada.IdSolicitud)">Ver Detalles</button>
    </div>
}

@code {
    [Parameter]
    public string NombreUsuario { get; set; }
    private Usuario_Persona usuario;
    private ListaEnlazadaSimple opciones = new ListaEnlazadaSimple();
    private ListaEnlazadaSimple listaSolicitudes = new ListaEnlazadaSimple();
    private bool mostrarFormulario = false;
    private bool mostrarSolicitudes = false;
    private bool mostrarAgregarOpcion = false;
    private Opcion opcionSeleccionada;
    private string nuevaOpcionDescripcion;
    private string descripcionDetallada;
    private string prioridadSeleccionada = "";
    private string mensajeConfirmacion;
    private Solicitud solicitudRecienCreada;  // To store the recently created request

    protected override async Task OnInitializedAsync()
    {
        usuario = await usuarioService.ObtenerUsuarioPorNombreUsuario(NombreUsuario);
        if (usuario != null)
        {
            opciones = await solicitudService.ObtenerOpcionesAsync();
        }
    }

    private async void ToggleVerSolicitudes()
    {
        mostrarSolicitudes = !mostrarSolicitudes;
        if (mostrarSolicitudes)
        {
            await CargarSolicitudes();
        }
        else
        {
            StateHasChanged(); // Ensure the UI updates correctly
        }
    }

    private async Task CargarSolicitudes()
    {
        listaSolicitudes = await solicitudService.ObtenerSolicitudesPorUsuario(usuario.Id);
        StateHasChanged();
    }

    private void VerDetalleSolicitud(int idSolicitud)
    {
        NavigationManager.NavigateTo($"/detalle-solicitud/{idSolicitud}");
    }

    private void ToggleFormularioSolicitud()
    {
        mostrarFormulario = !mostrarFormulario;
        if (!mostrarFormulario)
        {
            ResetForm();
        }
    }

    private void SeleccionarOpcion(Opcion opcion)
    {
        opcionSeleccionada = opcion;
        mostrarFormulario = false;
        mensajeConfirmacion = null;
        StateHasChanged();
    }

    private void MostrarAgregarOpcionFormulario()
    {
        mostrarAgregarOpcion = true;
    }

    private async Task AgregarOpcion()
    {
        if (!string.IsNullOrEmpty(nuevaOpcionDescripcion))
        {
            Opcion nuevaOpcion = new Opcion { Descripcion = nuevaOpcionDescripcion };
            await solicitudService.AgregarNuevaOpcionAsync(nuevaOpcion);
            nuevaOpcionDescripcion = "";
            mostrarAgregarOpcion = false;
            opciones = await solicitudService.ObtenerOpcionesAsync();
            StateHasChanged();
        }
    }

    private async Task ConfirmarSolicitud()
    {
        if (opcionSeleccionada != null && !string.IsNullOrWhiteSpace(descripcionDetallada) && !string.IsNullOrWhiteSpace(prioridadSeleccionada))
        {
            Solicitud nuevaSolicitud = new Solicitud
            {
                IdCliente = usuario.Id,
                IdOpcion = opcionSeleccionada.IdOpcion,
                DescripcionProblema = opcionSeleccionada.Descripcion,
                Estado = "En espera",
                FechaCreacion = DateTime.Now,
                FechaUltimaActualizacion = DateTime.Now,
                NombreCreador = NombreCompleto,
                DescripcionDetallada = descripcionDetallada,
                Prioridad = prioridadSeleccionada,
            };
            try
            {
                int idSolicitudGenerada = await solicitudService.AgregarSolicitudAsync(nuevaSolicitud);
                nuevaSolicitud.IdSolicitud = idSolicitudGenerada;
                solicitudRecienCreada = nuevaSolicitud;
                mensajeConfirmacion = $"Solicitud #{idSolicitudGenerada} creada exitosamente.";
                ResetForm();
            }
            catch (Exception ex)
            {
                mensajeConfirmacion = $"Error al crear la solicitud: {ex.Message}";
            }
            StateHasChanged();
        }
        else
        {
            mensajeConfirmacion = "Complete todos los campos para confirmar la solicitud.";
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        opcionSeleccionada = null;
        descripcionDetallada = "";
        prioridadSeleccionada = "";
    }

    private string NombreCompleto => usuario != null ? $"{usuario.Nombre} {usuario.Apellido}" : "Usuario Desconocido";

    private void BuscarByFiltro()
    {
        NavigationManager.NavigateTo($"/Cliente/BuscarPorFiltroCliente/{usuario.Id}");
    }
}
